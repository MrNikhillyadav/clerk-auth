1. Authentication using Clerk
    Create Dashboard/layout.js & Dashboard/page.js
        (auth)/sign-in & (auth)/sign-out
            customize auth-forms(hyperUI.dev)

2. Create '_components'folder
    _components/Header.jsx

3. Backend-setup (Drizzle ORM + PostgreSQL)
    visit Drizzle/docs/PostgreSQL page
        install and change version to '18.3.1' in package.json

        Create 'utils' directory
            create 'db.js'
                visit neon.tech/Dashboard and copy db url
                    paste in .env.local with variable :' NEXT_PUBLIC_DRIZZLE_DB_URL'
                        create 'drizzle.config.js' and paste code from Drizzle-kit.

            create 'schema.js'
                import * as schema from './schema' in bd.js file
                    update schema path in  'drizzle.config.js'
                        In package.json file add:
                                    "db:push":"npx drizzle-kit push",
                                    "db:studio":"npx drizzle-kit studio" 
                                    do npm run db:push, and changes will be applied.

4. Create addNewInterview component in '_components'
    use shadcn UI library to make form submit & the collected data in console.
        visit Google gemini API
            Generate questions in Json format
                npm install @google/generative-ai in terminal

5. Create GeminiAIModel.js in utils forlder
    paste Gemini api key in .env.local 
        paste code from gemini chat prompt and modify
            (in ChatPrompt mention to respond in JSON foramt if required)
                delete history lines and remove async function and export chat session.
                  [1hr:22min]
                
6. Inside addNewInterview.jsx
    copy gemini chat prompt
        change keywords using useStates Ex... "+jobPosition+"
            use InputPrompt variable for this
                create count variable in .env.local
                    pass InputPrompt to chatSessiom.message(), store to result
                        replace '''json with ' '
                            parse the result to json
                                add loadingCircle UI while generating question using useState.
                                    etc.
                            
6. Insert the response into the database.
    select keyworkds to insert into db table.
        install UUID package to generate unique mock ID.
            use useUser() hook to retrieve createdBy.
               npm i moment to retrieve createdAt. 
                return mockId everytime when inserted to database.
                    do little error handling 

7. Interview landing page   
    create dynamic route Interview/[Interviewid]/page.jsx
        router.push('/dashboard/interview'+resp[0]?.mockId) method in addNewInterview.jsx
            capture this mockId using params
                get interview details
                    useState to setInterviewData(result[0])

8. install react webcam
    useState and conditionals if webCamEnable then this otherwise show this webcam icon
        retrieve interviewData and show them in left like jobPosition,jobDescription etc.
            start interview button to go to questions page.

9. To show Interview question
    create startInterview folder    
        use GetInterviewDetails function and make useStates
            create a _components folder inside startInterview folder
                create questionsection.jsx inside it.
                    pass the jsonMockResp to QuestionSection.jsx  as prop .

10. Inside QuestionSection.jsx, map over the data and retrieve it.
        show active question number using prop, conditional rendering etc. [2hr:12min]
            do operational chaining to retrieve questions safely.
                design the UI .

                Add a new Compontent on RHS for voice recording.
                    create RecordAnswerSection.jsx in _components. Import it to Page.jsx as well.
                        for audio transcribe, imort react library ,and add  "use client" in file. 



            



        
        
        





